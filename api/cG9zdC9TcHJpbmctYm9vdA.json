{"title":"Spring boot","date":"2018-10-10T13:54:55.000Z","slug":"Spring-boot","tags":["Spring-boot","知识框架"],"updated":"2018-10-18T16:53:19.249Z","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ol>\n<li>创建一个笔记，收集灵感，收集有用的学习知识点</li>\n<li>方便以后开始学习一样技术的时候，能够快速定位</li>\n<li>写下学习计划，制定学习方向、模板，做好二次学习的准备</li>\n<li>需要记录技术点的详细的官网地址，知识点参考的网址</li>\n<li>定位：这里的文章大多不是原创，以收集资料为主</li>\n<li>重点：扩展自己的知识面</li>\n<li>要求：标题、简单的概括、简单的示例（可选）、应用场景（可选）</li>\n<li>格言：日积月累就是超越，一点一滴就是实力的见证。</li>\n</ol>\n<h2 id=\"Spring-boot\"><a href=\"#Spring-boot\" class=\"headerlink\" title=\"Spring boot\"></a>Spring boot</h2><h3 id=\"亮点\"><a href=\"#亮点\" class=\"headerlink\" title=\"亮点\"></a>亮点</h3><ol>\n<li>简单</li>\n<li>变简单</li>\n<li>自动配置</li>\n<li>简化依赖</li>\n</ol>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ol>\n<li><p>采用了Spring boot，能够解决什么问题呢？</p>\n<ul>\n<li><p>Spring boot能够使编码变精简、配置变简单、部署变快捷、监控变容易</p>\n</li>\n<li><p>Spring boot默认快速启动一个web容器，不需要外置web容器，将注意力集中在编码上，而不是配置容器等方面上。</p>\n</li>\n<li>Spring boot是Spring框架扬长避短的杰作，简化了spring冗余的配置，从xml配置到java Config配置，从setBean的方式配置到自动注解，从多个properties+xml到只要一个yml就完成了配置。</li>\n<li>Spring boot 默认配置；额很多框架的使用方式，整合了所有框架</li>\n<li>Spring boot能够对主流开发的框架，进行无配置集成，提高了开发、部署的效率，不用再花额外的时间，研究不同框架的整合与集成上</li>\n<li>Spring boot支持的配置文件application.yml，减少了传统的properties的链式麻烦</li>\n<li>Spring boot提供了热部署，实时刷新后台服务，能将服务改动后的效果，呈现出来</li>\n<li>Spring boot一键启动，只需要一个jar、war，甚至一段代码就可以了，不需要预部署应用服务器</li>\n<li>configprops：属性配置、dump：线程工作状态、env/name：环境变量、metrics/name：JVM性能指标、mapping：RESTful path与服务类的映射关系</li>\n<li></li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li>Spring boot有什么不足？<ul>\n<li>缺少服务注册、发现等外围方案、配套功能</li>\n<li>缺少外围监控集成方案，自身的acturator所提供的监控功能，还没有集成与现有的监控对接</li>\n<li>缺少外围安全管理方案、缺少REST落地的URI规划方案</li>\n<li>内置tomcat和Jetty容器</li>\n<li>比较适合做微服务，而不太适合做比较大型的项目。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>Spring boot 相关技术（以下关键词都可以另外写一章进行记录）<ul>\n<li>Mock     测试，用来模拟不容易构造、比较复杂的对象，方便并行的开发工作，可以用来极速演示、隔离系统（避免数据库污染）、模拟驱动开发、无法访问的资源、提高测试的覆盖率</li>\n<li>Docker    装满需要应用程序的容器，让更多的应用只需要在同一个硬件运行，即连即用，让开发人员易于快速构建可随时运行的容器化应用程序，大大简化了管理和部署应用程序的任务。</li>\n<li>RESTful    API 设计规范，用于 Web 数据接口的设计。让客户端发出的数据操作指令都是”动词 + 宾语”的结构</li>\n<li>MicroService</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ol>\n<li>Spring Boot 浅谈：<a href=\"https://blog.csdn.net/fly_zhyu/article/details/76407830\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fly_zhyu/article/details/76407830</a></li>\n<li>自动配置：<a href=\"https://www.jianshu.com/p/3d788198efab\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3d788198efab</a></li>\n<li>极简的Spring boot：<a href=\"https://www.jianshu.com/p/1936a23d6a56\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1936a23d6a56</a></li>\n<li></li>\n</ol>\n<p>未完待续…</p>\n","prev":{"title":"故事化应用","slug":"tellAYarn"},"next":{"title":"日积月累就是超越，一点一滴就是实力的见证","slug":"inspiration"},"link":"http://wenchongjiaokou.info./2018/10/10/Spring-boot/","toc":[{"title":"简介","id":"简介","index":"1"},{"title":"Spring boot","id":"Spring-boot","index":"2","children":[{"title":"亮点","id":"亮点","index":"2.1"},{"title":"概述","id":"概述","index":"2.2"},{"title":"关键点","id":"关键点","index":"2.3"}]},{"title":"附录","id":"附录","index":"3"}]}