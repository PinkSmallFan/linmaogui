{"meta":{"title":"WenChongAndJiaoKou","subtitle":null,"description":null,"author":"WenChongAndJiaoKou","url":"https://pinksmallfan.github.io/WenChongAndJiaoKou"},"pages":[{"title":"Hello World","date":"2018-10-15T18:27:29.680Z","updated":"2018-10-09T15:07:58.556Z","comments":true,"path":"bak/hello-world.html","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/bak/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}],"posts":[{"title":"实验吧（Decode）","slug":"2018-11-11-实验吧（Decode）","date":"2018-11-11T15:04:00.000Z","updated":"2018-11-11T16:01:38.519Z","comments":true,"path":"2018/11/11/2018-11-11-实验吧（Decode）/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/11/2018-11-11-实验吧（Decode）/","excerpt":"","text":"题目Decode 0x253464253534253435253335253433253661253435253737253464253531253666253738253464253434253637253462253466253534253662253462253464253534253435253738253433253661253435253737253466253531253666253738253464253434253435253462253464253534253435253332253433253661253435253738253464253531253666253738253464253534253535253462253464253534253431253330253433253661253435253737253465253531253666253738253464253661253435253462253466253534253633253462253464253534253435253737253433253661253662253334253433253661253662253333253433253661253435253738253465253431253364253364 解题思路首先，查看这段编码，有什么异常，我们可以发现253x出现得比较频繁，16进制25转为十进制为37，在ASCII即%，那么可以想到的是URL 十六进制转ASCII编码123456789hexd = [chr(int(b, 16)) for b in [hex16[i:i+2] for i in range(0, len(hex16), 2)]]# ['%', '4', 'd', '%', '5', '4', '%', '4', '5', '%', '3', '5', '%', '4', '3', '%', '6', 'a', '%', '4', '5', '%', '7', '7', '%', '4', 'd', '%', '5', '1', '%', '6', 'f', '%', '7', '8', '%', '4', 'd', '%', '4', '4', '%', '6', '7', '%', '4', 'b', '%', '4', 'f', '%', '5', '4', '%', '6', 'b', '%', '4', 'b', '%', '4', 'd', '%', '5', '4', '%', '4', '5', '%', '7', '8', '%', '4', '3', '%', '6', 'a', '%', '4', '5', '%', '7', '7', '%', '4', 'f', '%', '5', '1', '%', '6', 'f', '%', '7', '8', '%', '4', 'd', '%', '4', '4', '%', '4', '5', '%', '4', 'b', '%', '4', 'd', '%', '5', '4', '%', '4', '5', '%', '3', '2', '%', '4', '3', '%', '6', 'a', '%', '4', '5', '%', '7', '8', '%', '4', 'd', '%', '5', '1', '%', '6', 'f', '%', '7', '8', '%', '4', 'd', '%', '5', '4', '%', '5', '5', '%', '4', 'b', '%', '4', 'd', '%', '5', '4', '%', '4', '1', '%', '3', '0', '%', '4', '3', '%', '6', 'a', '%', '4', '5', '%', '7', '7', '%', '4', 'e', '%', '5', '1', '%', '6', 'f', '%', '7', '8', '%', '4', 'd', '%', '6', 'a', '%', '4', '5', '%', '4', 'b', '%', '4', 'f', '%', '5', '4', '%', '6', '3', '%', '4', 'b', '%', '4', 'd', '%', '5', '4', '%', '4', '5', '%', '7', '7', '%', '4', '3', '%', '6', 'a', '%', '6', 'b', '%', '3', '4', '%', '4', '3', '%', '6', 'a', '%', '6', 'b', '%', '3', '3', '%', '4', '3', '%', '6', 'a', '%', '4', '5', '%', '7', '8', '%', '4', 'e', '%', '4', '1', '%', '3', 'd', '%', '3', 'd']\"a=''for j in range(len(d)): a+=d[j]a# %4d%54%45%35%43%6a%45%77%4d%51%6f%78%4d%44%67%4b%4f%54%6b%4b%4d%54%45%78%43%6a%45%77%4f%51%6f%78%4d%44%45%4b%4d%54%45%32%43%6a%45%78%4d%51%6f%78%4d%54%55%4b%4d%54%41%30%43%6a%45%77%4e%51%6f%78%4d%6a%45%4b%4f%54%63%4b%4d%54%45%77%43%6a%6b%34%43%6a%6b%33%43%6a%45%78%4e%41%3d%3d ASCII编码转URL编码12345from urllib.parse import unquotea='%4d%54%45%35%43%6a%45%77%4d%51%6f%78%4d%44%67%4b%4f%54%6b%4b%4d%54%45%78%43%6a%45%77%4f%51%6f%78%4d%44%45%4b%4d%54%45%32%43%6a%45%78%4d%51%6f%78%4d%54%55%4b%4d%54%41%30%43%6a%45%77%4e%51%6f%78%4d%6a%45%4b%4f%54%63%4b%4d%54%45%77%43%6a%6b%34%43%6a%6b%33%43%6a%45%78%4e%41%3d%3d'test=unquote(a,'utf-8')test# 'MTE5CjEwMQoxMDgKOTkKMTExCjEwOQoxMDEKMTE2CjExMQoxMTUKMTA0CjEwNQoxMjEKOTcKMTEwCjk4Cjk3CjExNA==' Base64值解码12345 import base64test = 'MTE5CjEwMQoxMDgKOTkKMTExCjEwOQoxMDEKMTE2CjExMQoxMTUKMTA0CjEwNQoxMjEKOTcKMTEwCjk4Cjk3CjExNA=='data = base64.b64decode(test)datab'119\\n101\\n108\\n99\\n111\\n109\\n101\\n116\\n111\\n115\\n104\\n105\\n121\\n97\\n110\\n98\\n97\\n114' ASCII编码对比ASCII表，可得 welcometoshiyanbar b = 123bin(int(b))‘0b1111011’oct(int(b))‘0o173’hex(int(b))‘0x7b’int(b)","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"},{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"实验吧","slug":"实验吧","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/实验吧/"}]},{"title":"实验吧（我喜欢的培根）","slug":"2018-11-11-实验吧（我喜欢的培根）","date":"2018-11-11T14:34:08.000Z","updated":"2018-11-11T14:43:26.512Z","comments":true,"path":"2018/11/11/2018-11-11-实验吧（我喜欢的培根）/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/11/2018-11-11-实验吧（我喜欢的培根）/","excerpt":"","text":"题目我喜欢的培根，key: CTF{} 1-- --- .-. ... . ..--.- .. ... ..--.- -.-. --- --- .-.. ..--.- -... ..- - ..--.- -... .- -.-. --- -. ..--.- .. ... ..--.- -.-. --- --- .-.. . .-. ..--.- -.. -.-. -.-. -.. -.-. -.-. -.-. -.. -.. -.. -.-. -.. -.-. -.-. -.-. -.. -.. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.. -.. -.-. -.. -.-. -.-. -.-. -.-. -.. -.-. -.-. -.-. -.-. -.-. / -.-. -.. -.-. -.-. -.-. -.. -.-. -.-. -.. -.-. / -.-. -.-. -.-. -.. -.-. -.-. -.. -.. -.. -.-. -.-. -.. -.. -.. -.-. -.-. -.. -.-. -.. -.. 解题思路莫斯密码自己编写一个morse解码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#!/usr/bin/env python# -*- coding: utf-8 -*-'''&#123;Title:MorseCodeAuthor:PinkSmallFanType:cryptoDetail:莫斯密码&#125;'''def morse(lstr): flag = '' data = lstr.split(' ') dict = &#123;'.-': 'A', '-...': 'B', '-.-.': 'C', '-..':'D', '.':'E', '..-.':'F', '--.': 'G', '....': 'H', '..': 'I', '.---':'J', '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y', '--..': 'Z', '.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9', '-----': '0', '..--..': '?', '-..-.': '/', '-.--.-': '()', '-....-': '-', '.-.-.-': '.' &#125;; for item in data: flag+=dict[item] return flagdef main(lstr): print(lstr) result = morse(lstr) print(result) return result# example# print('helloworld')# abc='-- --- .-. ... . ..--.- .. ... ..--.- -.-. --- --- .-.. ..--.- -... ..- - ..--.- -... .- -.-. --- -. ..--.- .. ... ..--.- -.-. --- --- .-.. . .-. ..--.- -.. -.-. -.-. -.. -.-. -.-. -.-. -.. -.. -.. -.-. -.. -.-. -.-. -.-. -.. -.. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.. -.. -.-. -.. -.-. -.-. -.-. -.-. -.. -.-. -.-. -.-. -.-. -.-. / -.-. -.. -.-. -.-. -.-. -.. -.-. -.-. -.. -.-. / -.-. -.-. -.-. -.. -.-. -.-. -.. -.. -.. -.-. -.-. -.. -.. -.. -.-. -.-. -.. -.-. -.. -..'# main(abc)# result为MORSE..--.-IS..--.-COOL..--.-BUT..--.-BACON..--.-IS..--.-COOLER..--.-DCCDCCCDDDCDCCCDDCCCCCCCCCDDCDCCCCDCCCCC/CDCCCDCCDC/CCCDCCDDDCCDDDCCDCDD 培根密码 A/a aaaaa H/h aabbb O/o abbba V/v babab B/b aaaab I/i abaaa P/p abbbb W/w babba C/c aaaba J/j abaab Q/q baaaa X/x babbb D/d aaabb K/k ababa R/r baaab Y/y bbaaa E/e aabaa L/l ababb S/s baaba Z/z bbaab F/f aabab M/m abbaa T/t baabb G/g aabba N/n abbab U/u babaa 将DCCDCCCDDDCDCCCDDCCCCCCCCCDDCDCCCCDCCCCC/CDCCCDCCDC/CCCDCCDDDCCDDDCCDCDD去掉反斜杠，五个为一组，D-&gt;a，C-&gt;b，进行培根密码解密 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/usr/bin/env python# -*- coding: utf-8 -*-'''&#123;Title:PeigenCodeAuthor:PinkSmallFanType:cryptoDetail:培根密码&#125;'''def peigenDe(lstr): dict = &#123;'aaaaa': 'A', 'aaaab': 'B', 'aaaba': 'C', 'aaabb': 'D', 'aabaa': 'E', 'aabab': 'F', 'aabba': 'G', 'aabbb': 'H', 'abaaa': 'I', 'abaab': 'J', 'ababa': 'K', 'ababb': 'L', 'abbaa': 'M', 'abbab': 'N', 'abbba': 'O', 'abbbb': 'P', 'baaaa': 'Q', 'baaab': 'R', 'baaba': 'S', 'baabb': 'T', 'babaa': 'U', 'babab': 'V', 'babba': 'W', 'babbb': 'X', 'bbaaa': 'Y', 'bbaab': 'Z' &#125;; size = len(lstr) lenght = 5 returnStr = '' for i in range(round(size/lenght)): result=lstr[lenght*i:lenght*(i+1)].lower() returnStr += dict[result] return returnStrdef main(lstr): print(lstr) result = peigenDe(lstr) print(result) return result# example# data = 'baabaaabbbabaaabbaaaaaaaaabbabaaaabaaaaaabaaabaabaaaabaabbbaabbbaababb'# main(data)# SHIYANBAISCOOL PS：注意，之前含有的反斜杠，为空格，需要额外添加空格 最后大小写试一试就ok啦~","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"},{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"实验吧","slug":"实验吧","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/实验吧/"}]},{"title":"实验吧（困在栅栏里的爱）","slug":"2018-11-11-实验吧（困在栅栏里的爱）","date":"2018-11-11T08:56:50.000Z","updated":"2018-11-11T12:51:43.131Z","comments":true,"path":"2018/11/11/2018-11-11-实验吧（困在栅栏里的爱）/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/11/2018-11-11-实验吧（困在栅栏里的爱）/","excerpt":"","text":"困在栅栏里的爱题目最近一直在好奇一个问题，QWE到底等不等于ABC？ -.- .. –.- .-.. .– - ..-. -.-. –.- –. -. … — — flag格式：CTF{xxx} 题目地址：http://www.shiyanbar.com/ctf/1917 解题思路莫斯密码自己编写一个morse解码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#!/usr/bin/env python# -*- coding: utf-8 -*-'''&#123;Title:MorseCodeAuthor:PinkSmallFanType:cryptoDetail:莫斯密码&#125;'''def morse(lstr): flag = '' data = lstr.split(' ') dict = &#123;'.-': 'A', '-...': 'B', '-.-.': 'C', '-..':'D', '.':'E', '..-.':'F', '--.': 'G', '....': 'H', '..': 'I', '.---':'J', '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y', '--..': 'Z', '.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9', '-----': '0', '..--..': '?', '-..-.': '/', '-.--.-': '()', '-....-': '-', '.-.-.-': '.' &#125;; for item in data: flag+=dict[item] return flagdef main(lstr): print(lstr) result = morse(lstr) print(result) return result# example# print('helloworld')# abc='-.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- ---'# main(abc)# result为KIQLWTFCQGNSOO 替换密码qwe替换abc，即键盘的qwert…键盘从上到下，从左到右转换 12345678910111213141516171819202122232425262728#!/usr/bin/env python# -*- coding: utf-8 -*-'''&#123;Title:QWECodeAuthor:PinkSmallFanType:cryptoDetail:替换密码&#125;'''def qweDecode(lstr): qweData = 'QWERTYUIOPASDFGHJKLZXCVBNM' abcData = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' returnStr = '' for data in lstr: returnStr += abcData[qweData.index(data.upper())] return returnStrdef main(lstr): print(lstr) result = qweDecode(lstr) print(result) return result# example# data='KIQLWTFCQGNSOO'# main(data)# RHASBENVAOYLII 栏删密码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/env python# -*- coding: utf-8 -*-'''&#123;Title:FenceCodeAuthor:PinkSmallFanType:cryptoDetail:栏删密码&#125;'''def fenceDecode(lstr): decodeStr = '' returnStr = '' fenceSize = 1 encodeSize = len(lstr) for r in range(round(encodeSize/2)): fenceSize = r+1 decodeStr = '' for f in range(fenceSize): for e in range(encodeSize): if((f + e) % fenceSize == 0): decodeStr += lstr[e] returnStr += str(fenceSize) + ':' + decodeStr + '\\n' return returnStrdef main(lstr): print(lstr) result = fenceDecode(lstr) print(result) return resultdef myround(num): return int(num)+int(2*num)%2# example# data='RHASBENVAOYLII'# main(data)# RHASBENVAOYLII# 1:RHASBENVAOYLII# 2:RABNAYIHSEVOLI# 3:RSNOIAEALHBVYI# 4:RBAISVLANYHEOI# 5:REYBOSAIAVIHNL# 6:RNIELBYSOAAHVI# 7:RVNIEIBLSYAOHA# test# print(myround(6.9/2))# print(format(5/2, '.1f'))# print(round(2.5)) 倒序可以找到栏删密码中，第二个合适，即ILOVESHIYANBAR，接着大小写都试一下，就完成啦~","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"},{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"实验吧","slug":"实验吧","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/实验吧/"}]},{"title":"RSA","slug":"2018-11-9-RSA","date":"2018-11-09T15:42:42.000Z","updated":"2018-11-09T15:53:13.057Z","comments":true,"path":"2018/11/09/2018-11-9-RSA/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/09/2018-11-9-RSA/","excerpt":"","text":"Pythongmpy2引用 import gmpy2divm(…)divm(a, b, m) returns x such that b x == a modulo m. Raises a ZeroDivisionError exception if no such value x exists.invert(…)invert(x, m) returns y such that x y == 1 modulo m, or 0 if no such y exists. mpz(…) mpz() returns a new mpz object set to 0. mpz(n) returns a new mpz object from a numeric value n. If n is not an integer, it will be truncated to an integer. mpz(s[, base=0]) returns a new mpz object from a string s made of digits in the given base. If base = 0, thn binary, octal, or hex Python strings are recognized by leading 0b, 0o, or 0x characters. Otherwise the string is assumed to be decimal. Values for base can range between 2 and 62. 常用例子123456789# 已知p、q、e，求dimport gmpy2p =gmpy2.mpz(17)q =gmpy2.mpz(5)e =gmpy2.mpz(7)phi_n= (p - 1) * (q - 1)d = gmpy2.invert(e, phi_n)print(\"d is:\")print (d) pow引用 pow(…)pow(x, y, m) returns n such that x ^ y == 1 modulo m. Raises a ZeroDivisionError exception if no such value n exists. 常用例子1234567891011import gmpy2p =gmpy2.mpz(9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483)q =gmpy2.mpz(11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407)e =gmpy2.mpz(65537)phi_n= (p - 1) * (q - 1)n=p*qd = gmpy2.invert(e, phi_n)c=gmpy2.mpz(83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034)m=pow(c,d,n)print(\"Message is :\")print(m) 引用地址","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"}]},{"title":"微服务实践笔记","slug":"2018-11-8-微服务实践笔记","date":"2018-11-08T15:51:02.000Z","updated":"2018-11-08T23:23:37.396Z","comments":true,"path":"2018/11/08/2018-11-8-微服务实践笔记/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/08/2018-11-8-微服务实践笔记/","excerpt":"","text":"【宿舍】使用SpringBoot快速构建RESTful API应用 【公司】业务平台Spring改为SpringBoot项目 【公司】SpringBoot的单元测试 【宿舍】SpringBoot的热部署等配置 【宿舍】SpringCloud的初体验 【公司】建立activeMQ，并与redis做结合 【公司】将SpringBoot项目拆分为微服务 【宿舍】实现将微服务注册到EurkaServer上 【宿舍】SpringBoot容错处理搭建Hystrix 【宿舍】使用Ribbin实现客户端负载均衡 【宿舍】实现Hystrix Dashboard可视化监控数据 【公司】Elasticsearch日志存储系统搭建 【公司】Logstash日志收集系统搭建 【公司】Kiaabna日志查询系统搭建 【宿舍】ELK日志中心搭建 【宿舍】自主搭建系统监控中心 【宿舍】Dubbo的初体验 【宿舍】jenkins的持续集成搭建 【宿舍】Docker镜像下载与构建 【宿舍】使用Docker Registry打造私有镜像仓库 【宿舍】使用Spring Cloud Bus实现配置的自动刷新 SpringBoot快速构建RESTful API应用搭建SpringBoot项目pom依赖1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;net.spring&lt;/groupId&gt; &lt;artifactId&gt;example&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;example&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.restdocs&lt;/groupId&gt; &lt;artifactId&gt;spring-restdocs-mockmvc&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; bo实体类123456789101112131415161718public class User &#123; private long id; private String content; public User(long id, String content)&#123; this.id=id; this.content=content; &#125; public long getId()&#123; return id; &#125; public String getContent()&#123; return content; &#125;&#125; Control层(REST, GET/POST/PUT/DELETE)1234567891011121314151617181920212223242526272829303132333435363738394041424344@RestControllerpublic class UserController &#123; private static final String template = \"Hello, %s\"; private final AtomicLong counter = new AtomicLong(); @RequestMapping(\"/greeting\") public User greeting(@RequestParam(value = \"name\", defaultValue = \"world\")String name)&#123; return new User(counter.incrementAndGet(), String.format(template, name)); &#125; @GetMapping(\"/users\") public ResponseEntity&lt;List&lt;User&gt;&gt; getUser()&#123; List&lt;User&gt; users = new ArrayList&lt;&gt;(); users.add(new User(1, \"Bob\")); //counter.incrementAndGet() users.add(new User(2, \"Tom\")); return new ResponseEntity&lt;&gt;(users, HttpStatus.OK); &#125; @PostMapping(\"/register\") public ResponseEntity&lt;String&gt; register(@Valid User user, BindingResult bindingResult) &#123; if(bindingResult.hasErrors())&#123; return new ResponseEntity&lt;&gt;(bindingResult.getFieldError().getDefaultMessage(), HttpStatus.BAD_REQUEST); &#125; return new ResponseEntity&lt;&gt;(\"success\", HttpStatus.OK); &#125; @PutMapping(\"/update\") public ResponseEntity&lt;User&gt; updateUser(User user)&#123; User uUser = user; return new ResponseEntity&lt;&gt;(uUser, HttpStatus.OK); &#125; @DeleteMapping(\"/delete\") public ResponseEntity deleteUser(long id) &#123; return new ResponseEntity(HttpStatus.OK); &#125;&#125; 测试例程12345678910111213141516171819202122232425262728293031323334353637public class testUser &#123; private final MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new UserController()).build(); @Test public void testGetUsers() throws Exception&#123; mockMvc.perform(MockMvcRequestBuilders.get(\"/users\")) .andExpect(MockMvcResultMatchers.status().isOk()) .andExpect(MockMvcResultMatchers.content().json(\"[&#123;\\\"id\\\":1,\\\"content\\\":\\\"Bob\\\"&#125;,&#123;\\\"id\\\":2,\\\"content\\\":\\\"Tom\\\"&#125;]\")); &#125; @Test public void testRegister() throws Exception &#123; mockMvc.perform(MockMvcRequestBuilders.post(\"/register\") .param(\"id\", \"1\") .param(\"content\", \"gaga\")) .andExpect(MockMvcResultMatchers.status().isOk()) .andExpect(MockMvcResultMatchers.content().string(\"success\")); &#125; @Test public void testUpdateUser() throws Exception &#123; mockMvc.perform(MockMvcRequestBuilders.put(\"/update\") .param(\"id\", \"1\") .param(\"content\", \"tt\")) .andExpect(MockMvcResultMatchers.status().isOk()) .andExpect(MockMvcResultMatchers.content().string(\"&#123;\\\"id\\\":1,\\\"content\\\":\\\"tt\\\"&#125;\")); &#125; @Test public void testDelete() throws Exception &#123; mockMvc.perform(MockMvcRequestBuilders.delete(\"/delete\") .param(\"id\",\"1\")) .andExpect(MockMvcResultMatchers.status().isOk()) .andExpect(MockMvcResultMatchers.content().string(\"\")); &#125;&#125; SpringBoot的热部署等配置pom依赖123456&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;scope&gt;true&lt;/scope&gt;&lt;/dependency&gt; 在bulid节点修改为 123456789101112&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;!-- fork:如果没有该配置，这个devtools不会起作用，即应用不会restart --&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 编辑器的自动构建IDEA file ，Settings ，Build ,Execution,Deplment (ctrl+shift+alt+S)，选择Compiler，对“Build project automaticaly”打钩。 Shift+ALT+Ctrl+/ ，选择Registry，修改默认注册关系，找“complier.automake.allow.when.app.running”，打钩后选择Close eclipse 导航栏，选择Build ，勾选Build Automaticaly","categories":[],"tags":[]},{"title":"python常用","slug":"2018-11-4-python常用","date":"2018-11-04T09:24:34.000Z","updated":"2018-11-04T22:04:40.468Z","comments":true,"path":"2018/11/04/2018-11-4-python常用/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/04/2018-11-4-python常用/","excerpt":"","text":"常用函数12ord() # 将char数据转为ASCII数据，例如：'0'转为48,ord('0')chr() # 将ASCII数据转为char数据，例如：65转为'A',chr(65)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/python/"}]},{"title":"实验吧（困在栅栏里的凯撒）","slug":"2018-11-4-实验吧(困在栅栏里的凯撒)","date":"2018-11-04T07:58:54.000Z","updated":"2018-11-04T08:08:22.360Z","comments":true,"path":"2018/11/04/2018-11-4-实验吧(困在栅栏里的凯撒)/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/04/2018-11-4-实验吧(困在栅栏里的凯撒)/","excerpt":"","text":"困在栅栏里的凯撒题目 小白发现了一段很6的字符：NlEyQd{seft} 解题思路​ 顾名思义，先栅栏，后凯撒 栅栏（FenceCode） 12341：NEQ&#123;etlydsf&#125;2：Ny&#123;flQstEde&#125;3：NQeldfE&#123;tys&#125;4：N&#123;lsEeyfQtd&#125; 凯撒（CaeserCode） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291：OFR&#123;fumzetg&#125;2：Oz&#123;gmRtuFef&#125;3：ORfmegF&#123;uzt&#125;4：O&#123;mtFfzgRue&#125;1：PGS&#123;gvnafuh&#125;2：Pa&#123;hnSuvGfg&#125;3：PSgnfhG&#123;vau&#125;4：P&#123;nuGgahSvf&#125;1：QHT&#123;hwobgvi&#125;2：Qb&#123;ioTvwHgh&#125;3：QThogiH&#123;wbv&#125;4：Q&#123;ovHhbiTwg&#125;1：RIU&#123;ixpchwj&#125;2：Rc&#123;jpUwxIhi&#125;3：RUiphjI&#123;xcw&#125;4：R&#123;pwIicjUxh&#125;1：SJV&#123;jyqdixk&#125;2：Sd&#123;kqVxyJij&#125;3：SVjqikJ&#123;ydx&#125;4：S&#123;qxJjdkVyi&#125;1：TKW&#123;kzrejyl&#125;2：Te&#123;lrWyzKjk&#125;3：TWkrjlK&#123;zey&#125;4：T&#123;ryKkelWzj&#125;1：ULX&#123;lasfkzm&#125;2：Uf&#123;msXzaLkl&#125;3：UXlskmL&#123;afz&#125;4：U&#123;szLlfmXak&#125;1：VMY&#123;mbtglan&#125;2：Vg&#123;ntYabMlm&#125;3：VYmtlnM&#123;bga&#125;4：V&#123;taMmgnYbl&#125;1：WNZ&#123;ncuhmbo&#125;2：Wh&#123;ouZbcNmn&#125;3：WZnumoN&#123;chb&#125;4：W&#123;ubNnhoZcm&#125;1：XOA&#123;odvincp&#125;2：Xi&#123;pvAcdOno&#125;3：XAovnpO&#123;dic&#125;4：X&#123;vcOoipAdn&#125;1：YPB&#123;pewjodq&#125;2：Yj&#123;qwBdePop&#125;3：YBpwoqP&#123;ejd&#125;4：Y&#123;wdPpjqBeo&#125;1：ZQC&#123;qfxkper&#125;2：Zk&#123;rxCefQpq&#125;3：ZCqxprQ&#123;fke&#125;4：Z&#123;xeQqkrCfp&#125;1：ARD&#123;rgylqfs&#125;2：Al&#123;syDfgRqr&#125;3：ADryqsR&#123;glf&#125;4：A&#123;yfRrlsDgq&#125;1：BSE&#123;shzmrgt&#125;2：Bm&#123;tzEghSrs&#125;3：BEszrtS&#123;hmg&#125;4：B&#123;zgSsmtEhr&#125;1：CTF&#123;tianshu&#125;2：Cn&#123;uaFhiTst&#125;3：CFtasuT&#123;inh&#125;4：C&#123;ahTtnuFis&#125;1：DUG&#123;ujbotiv&#125;2：Do&#123;vbGijUtu&#125;3：DGubtvU&#123;joi&#125;4：D&#123;biUuovGjt&#125;1：EVH&#123;vkcpujw&#125;2：Ep&#123;wcHjkVuv&#125;3：EHvcuwV&#123;kpj&#125;4：E&#123;cjVvpwHku&#125;1：FWI&#123;wldqvkx&#125;2：Fq&#123;xdIklWvw&#125;3：FIwdvxW&#123;lqk&#125;4：F&#123;dkWwqxIlv&#125;1：GXJ&#123;xmerwly&#125;2：Gr&#123;yeJlmXwx&#125;3：GJxewyX&#123;mrl&#125;4：G&#123;elXxryJmw&#125;1：HYK&#123;ynfsxmz&#125;2：Hs&#123;zfKmnYxy&#125;3：HKyfxzY&#123;nsm&#125;4：H&#123;fmYyszKnx&#125;1：IZL&#123;zogtyna&#125;2：It&#123;agLnoZyz&#125;3：ILzgyaZ&#123;otn&#125;4：I&#123;gnZztaLoy&#125;1：JAM&#123;aphuzob&#125;2：Ju&#123;bhMopAza&#125;3：JMahzbA&#123;puo&#125;4：J&#123;hoAaubMpz&#125;1：KBN&#123;bqivapc&#125;2：Kv&#123;ciNpqBab&#125;3：KNbiacB&#123;qvp&#125;4：K&#123;ipBbvcNqa&#125;1：LCO&#123;crjwbqd&#125;2：Lw&#123;djOqrCbc&#125;3：LOcjbdC&#123;rwq&#125;4：L&#123;jqCcwdOrb&#125;1：MDP&#123;dskxcre&#125;2：Mx&#123;ekPrsDcd&#125;3：MPdkceD&#123;sxr&#125;4：M&#123;krDdxePsc&#125;1：NEQ&#123;etlydsf&#125;2：Ny&#123;flQstEde&#125;3：NQeldfE&#123;tys&#125;4：N&#123;lsEeyfQtd&#125; 就可以看到答案是：CTF{tianshu}","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"},{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"实验吧","slug":"实验吧","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/实验吧/"}]},{"title":"Java WebService服务端与客户端的搭建","slug":"2018-11-2-Java-WebService服务端与客户端的搭建","date":"2018-11-02T01:29:00.000Z","updated":"2018-11-02T13:02:00.830Z","comments":true,"path":"2018/11/02/2018-11-2-Java-WebService服务端与客户端的搭建/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/02/2018-11-2-Java-WebService服务端与客户端的搭建/","excerpt":"","text":"服务端最简单的WebService服务端流程 搭建一个web工程 在web工程建立包（这里我命名为xx.xxaa，其他也没关系） 在web工程建立一个类，并命名（这里我命名为ServiceServer，其他也没关系） 编写main方法，开启服务 1234567891011121314151617181920import javax.jws.WebService;import javax.xml.ws.Endpoint;@WebServicepublic class ServiceServer &#123; /** * 客户端将会调用的方法（服务端被调用的方法） * @param something * @return */ public String serverPrint(String something)&#123; return \"Server print: \"+something; &#125; public static void main(String[] args)&#123; Endpoint.publish(\"http://127.0.0.1:9991/Service/ServiceServer\", new ServiceServer()); System.out.print(\"service open success! Enjoy it...\"); &#125;&#125; 打开网址：http://127.0.0.1:9991/Service/ServiceServer?wsdl 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!-- Published by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.9-b130926.1035 svn-revision#5f6196f2b90e9460065a4c2f4e30e065b245e51e. --&gt;&lt;!-- Generated by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.9-b130926.1035 svn-revision#5f6196f2b90e9460065a4c2f4e30e065b245e51e. --&gt;&lt;definitions xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:wsp=\"http://www.w3.org/ns/ws-policy\" xmlns:wsp1_2=\"http://schemas.xmlsoap.org/ws/2004/09/policy\" xmlns:wsam=\"http://www.w3.org/2007/05/addressing/metadata\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://service.netcaaa.netca.net/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://schemas.xmlsoap.org/wsdl/\" targetNamespace=\"http://service.xxaa.xx/\" name=\"ServiceServerService\"&gt;&lt;types&gt;&lt;xsd:schema&gt;&lt;xsd:import namespace=\"http://service.xxaa.xx/\" schemaLocation=\"http://127.0.0.1:9991/Service/ServiceServer?xsd=1\"/&gt;&lt;/xsd:schema&gt;&lt;/types&gt;&lt;message name=\"serverPrint\"&gt;&lt;part name=\"parameters\" element=\"tns:serverPrint\"/&gt;&lt;/message&gt;&lt;message name=\"serverPrintResponse\"&gt;&lt;part name=\"parameters\" element=\"tns:serverPrintResponse\"/&gt;&lt;/message&gt;&lt;portType name=\"ServiceServer\"&gt;&lt;operation name=\"serverPrint\"&gt;&lt;input wsam:Action=\"http://service.xxaa.xx/ServiceServer/serverPrintRequest\" message=\"tns:serverPrint\"/&gt;&lt;output wsam:Action=\"http://service.xxaa.xx/ServiceServer/serverPrintResponse\" message=\"tns:serverPrintResponse\"/&gt;&lt;/operation&gt;&lt;/portType&gt;&lt;binding name=\"ServiceServerPortBinding\" type=\"tns:ServiceServer\"&gt;&lt;soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\" style=\"document\"/&gt;&lt;operation name=\"serverPrint\"&gt;&lt;soap:operation soapAction=\"\"/&gt;&lt;input&gt;&lt;soap:body use=\"literal\"/&gt;&lt;/input&gt;&lt;output&gt;&lt;soap:body use=\"literal\"/&gt;&lt;/output&gt;&lt;/operation&gt;&lt;/binding&gt;&lt;service name=\"ServiceServerService\"&gt;&lt;port name=\"ServiceServerPort\" binding=\"tns:ServiceServerPortBinding\"&gt;&lt;soap:address location=\"http://127.0.0.1:9991/Service/ServiceServer\"/&gt;&lt;/port&gt;&lt;/service&gt;&lt;/definitions&gt; 客户端流程 搭建一个普通的Project工程 在Project工程建立一个类，并命名（这里我命名为ServiceClient，其他也没关系） cmd编译Service开启服务，提供的Web服务描述语言，生成对应客户端的代码（解析WSDL、生成代码、编译代码） 123# wsimport -s /project/src -p package.client -keep http://127.0.0.1:9991/Service/ServiceServer?wsdlwsimport -s C:/WebServiceProject/src -p xx.xxaa.client -keep http://127.0.0.1:9991/Service/ServiceServer?wsdl 编写main方法，连接服务 123456789101112131415161718package net.netca.netcaaa.test;import xx.xxaa.client.ServiceServer;import xx.xxaa.client.ServiceServerService;public class ServiceClient &#123; public static void main(String[] args) &#123; // 请求服务 ServiceServer server = new ServiceServerService().getServiceServerPort(); // 调用服务 String printData = server.serverPrint(\"2018年11月2日09:51:45\"); System.out.println(printData); &#125;&#125;// 打印内容如下：// Server print: 2018年11月2日09:51:45 ###","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/java/"}]},{"title":"R语言下order、rank、sort的使用","slug":"R语言下order、rank、sort的使用","date":"2018-11-01T07:51:38.000Z","updated":"2018-11-04T02:30:25.060Z","comments":true,"path":"2018/11/01/R语言下order、rank、sort的使用/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/11/01/R语言下order、rank、sort的使用/","excerpt":"","text":"sort、rank、order的定义 sort：对一个向量x的排序 rank：对排序的结果，进行原数组1到n的排名 order：对sort排序后的数组，对应原数组数组的位置 举例123456z&lt;-c(9,2,14,6,3,1) # 一共6个数sort(z) # 输出 1,2,3,6,9,14rank(z) # 输出 5,2,6,4,3,1 (9,2,14,6,3,1)的排名，9排名第5；14排名第6order(z) # 输出 6,2,5,4,1,3 (1,2,3,6,9,14)在(9,2,14,6,3,1)的位置# order，比如(1,2,3,6,9,14)中的1在(9,2,14,6,3,1)是第6位，(1,2,3,6,9,14)中的14在(9,2,14,6,3,1)是第3位order(z,decreasing = TRUE) # 输出3,1,4,5,2,6,为order排序的反排序","categories":[],"tags":[{"name":"R","slug":"R","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/R/"},{"name":"生信","slug":"生信","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/生信/"}]},{"title":"网易入职路线","slug":"网易入职路线","date":"2018-10-27T12:10:45.000Z","updated":"2018-10-27T12:50:45.055Z","comments":true,"path":"2018/10/27/网易入职路线/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/27/网易入职路线/","excerpt":"","text":"基本知识必知必会 DB额外素质 所有技能汇总 精通java编程，熟悉java sdk提供的主要能力; 理解java运行时工作原理，熟悉jvm性能调优，能够充分利用java特性支持框架与程序库的设计开发; 熟悉多线程编程，熟练使用java并发包下的各项常用基础设施; 熟悉网络编程，能够熟练使用java nio开发高并发、高吞吐量的服务; 熟悉常用网络协议，如TCP/IP, HTTP; 能够熟练使用linux，能够利用常用的工具对程序进行跟踪诊断; 有分布式系统开发经验，对消息服务、负载均衡、高可用机制等有深入理解，有开放平台开发经验者优先； 具备良好学习、沟通能力及团队协作精神，对工作积极严谨，勇于承担压力。 参与公众号、小程序、小游戏等微信相关产品开发； 参与Web业务系统开发； 精通Web系统开发； 精通Java语言，及Spring、MyBatis/Hibernate等后端框架框架； 熟悉数据库相关技术，熟悉MySQL和Oracle，版本，字段区别，熟悉SQL性能优化 熟练使用Spring相关技术，例如Spring Boot、Spring Cloud、Spring Security等； 熟练使用Memcached、MongoDB、RabbitMQ等中间件； 优秀的沟通协作和逻辑分析能力，能对团队成员进行开发和技术指导。 熟悉Spring/Netty/Rabbitmq/Hystrix等； 熟悉Nginx/Tomcat等web服务器； redis持久化策略，redis五种数据结构？ZSET怎么实现 怎么分析生产环境GC情况？（jconsole、jvisualvm、runtime包、dump日志）？说下分析GC日志 MQ、MQ怎么保证恰好被消费一次？如果多次消费怎么保证幂等？因为上游业务bug或者其他问题不断的收到同一条消息怎么保证消费者的业务不受影响？ dubbo也就是RPC的完整流程是怎么样的（序列化、传输、动态代理……），dubbo的优点是什么？为什么要用dubbo？没有rpc的时候是怎么做的？all in one 这种模式有什么优点？dubbo的消费者为什么也要注册到zookeeper？只有提供者注册服务不行吗？dubbo为什么用hessian?jdk的序列化有什么问题？xml、json为啥不行？dubbo网络传输是怎么实现的？ mongdb实现细节","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"}]},{"title":"密钥对的相关操作（keytool、openSSL)","slug":"2018-10-25-密钥对的相关操作（keytool、openSSL)","date":"2018-10-25T02:01:32.000Z","updated":"2018-10-28T14:34:47.525Z","comments":true,"path":"2018/10/25/2018-10-25-密钥对的相关操作（keytool、openSSL)/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/25/2018-10-25-密钥对的相关操作（keytool、openSSL)/","excerpt":"","text":"cacerts概念cacerts：trusted certificate authority (CA) certificates ​ The cacerts file is a collection of trusted certificate authority (CA) certificates. Sun Microsystems™ includes a cacerts file with its SSL support in the Java™ Secure Socket Extension (JSSE) tool kit and JDK 1.4.x. It contains certificate references for well-known Certificate authorities, such as VeriSign™. Its format is the “keystore” format defined by Sun. An administrator can edit the cacerts file with a command line tool (also provided by Sun) called keytool. For more information about keytool, see the Sun Web site. Note: The default password for the cacerts file supplied by Sun is changeit. You must use this password to view the contents or to import a new certificate. For security reasons, change the default password. The essential requirement is that the certificate authority that signed the HPE Service Manager server’s certificate must be in the list of certificate authorities named in this file. To use a self-issued server certificate created with OpenSSL or a tool such as Microsoft Certificate Server™, you must import the certificate for this private certificate authority into the cacerts file that the client uses for SSL. If you do not import the certificate, SSL connections fail because the Java SSL implementation does not recognize the certificate authority. ​ 简单的来说，cacerts是java用于接受受信任的证书已经证书链，cacerts默认包含有一些众所周知的权威证书，以及证书链。当你需要使用https协议，为你的服务添加ssl的时候，需要将你的证书和证书链导入cacerts（如果已经导入过了，就不需要了）。 keytool查看java自带的cacerts1234567891011# Linuxcd $JAVA_HOME/jre/lib/securitykeytool -list -storepass changeit -keystore \"./cacerts\" # 查询所有的证书keytool -list -storepass changeit -keystore \"./cacerts\" |grep server # 查询alias带有server的证书# Windowscd %JAVA_HOME%/jre/lib/securitykeytool -list -storepass changeit -keystore \"./cacerts\" # 查询所有的证书keytool -list -storepass changeit -keystore \"./cacerts\" |findstr /i server# 查询alias带有server的证书 产生jks密钥对12# 产生一个签名算法为SHA256withRSA的，密钥长度为2048，的RSA密钥对，即软证书server.jkskeytool -keystore server.jks -genkey -alias xxx_server -keyalg RSA -sigalg SHA256withRSA -keysize 2048 导出jks的证书12# 证书，即公钥keytool -export -alias server -keystore server.jks -rfc -file sign.cer 导入证书到cacerts123cd $JAVA_HOME/jre/lib/security# 将证书导入cacerts，并别名为serverkeytool -import -keystore \"./cacerts\" -alias server -trustcacerts -storepass changeit -file /var/tmp/certs/Server.cer 在cacerts上删除证书123cd $JAVA_HOME/jre/lib/security# 删除命名为server的证书keytool -delete -alias server -keystore \"./cacerts\" -storepass changeit 参数分析 -genkey 在用户主目录中创建一个默认文件”.keystore” 的软证书,产生一个mykey的别名，其中包含用户的公钥、私钥和证书(在没有指定生成位置的情况下,keystore会存在用户系统默认目录，如：对于window xp系统，会生成在系统的C:/Documents and Settings/UserName/文件名为“.keystore”)-alias 产生别名，keytool将通过这个别名进行查找-keystore 指定密钥库的名称(产生的各类信息将不在.keystore文件中)-keyalg 指定密钥的算法 (如 RSA DSA（如果不指定默认采用DSA），推荐采用RSA)-validity 指定创建的证书有效期多少天-keysize 指定密钥长度-storepass 指定密钥库的密码(获取keystore信息所需的密码)-keypass 指定别名条目的密码(私钥的密码)-dname 指定证书拥有者信息-list 显示密钥库中的证书信息-v 显示密钥库中的证书详细信息-export 将别名指定的证书导出到文件-file 参数指定导出到文件的文件名-delete 删除密钥库中某条目-printcert 查看导出的证书信息-keypasswd 修改密钥库中指定条目口令-storepasswd 修改keystore口令-import 将已签名数字证书导入密钥库 证书拥有者信息 例如： “CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码” 常用命令： keytool -export -alias 需要导出的别名 -keystore 指定keystore -file 指定导出的证书路径位置，及证书名称 -storepass 密码 keytool -printcert -file yushan.crt keytool -delete -alias 指定需删除的别 -keystore 指定keystore -storepass 密码 keytool -list -v -keystore 指定keystore -storepass 密码 keytool -import -alias 指定导入条目的别名 -keystore 指定keystore -file 需导入的证书 keytool -storepasswd -keystore e:/yushan.keystore(需修改口令的keystore) -storepass 123456(原始密码) -new yushan(新密码) keytool -keypasswd -alias 需修改的别名 -keypass 旧密码 -new 新密码 -storepass keystore密码 -keystore sage 下面是各选项的缺省值。-alias “mykey”-keyalg “DSA”-keysize 1024-validity 90-keystore 用户宿主目录中名为 .keystore 的文件-file 读时为标准输入，写时为标准输出 参考 什么是cacerts： https://docs.microfocus.com/SM/9.50/Hybrid/Content/security/concepts/what_is_a_cacerts_file.htm","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"}]},{"title":"PKI技术","slug":"PKI技术","date":"2018-10-24T15:46:06.000Z","updated":"2018-10-24T15:46:34.027Z","comments":true,"path":"2018/10/24/PKI技术/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/24/PKI技术/","excerpt":"","text":"","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/密码学/"}]},{"title":"json解析","slug":"json解析","date":"2018-10-24T01:34:56.000Z","updated":"2018-11-02T13:02:00.914Z","comments":true,"path":"2018/10/24/json解析/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/24/json解析/","excerpt":"","text":"JSON结构结构12345678910111213141516&#123; \"workers\":[ &#123; \"id\":\"1\", \"name\":\"programmer\" &#125;, &#123; \"id\":\"2\", \"name\":\"productManager\" &#125;, &#123; \"id\":\"3\", \"name\":\"leader\" &#125; ]&#125; bean实例一个单位对应一个bean123456789101112131415161718public class Worker &#123; private int id; private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 一个集合对应一个bean1234567891011public class Workers &#123; private List&lt;Worker&gt; workers; public List&lt;Worker&gt; getWorkers() &#123; return workers; &#125; public void setWorkers(List&lt;Worker&gt; workers) &#123; this.workers = workers; &#125;&#125; 举例12345678910111213141516171819202122public class JSONUtils&#123; /** * * &lt;/p&gt; 说明：&lt;/p&gt; * @param path 读取目录结构的路径，例如：\"/src/workers.json\" * @return 目录结构 * */ public static Workers getMap(String path) throws IOException&#123; InputStream inputStream = JSONUtils.class.getClassLoader().getResourceAsStream(path); String json = readAsString(inputStream); JSONObject jsonObject = JSONObject.fromObject(json); //修改类型，解决JSON net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.xxx.xxxx.vo.Work的错误 Map classMap = new HashMap(); classMap.put(\"workers\", Worker.class); JSONUtils.getMorpherRegistry().registerMorpher(new DateMorpher(new String[] &#123;\"yyyy-MM-dd\", \"yyyy-MM-dd HH:mm:ss\"&#125;)); Workers workers = (Workers) JSONObject.toBean(jsonObject, Workers.class, classMap); return Workers; &#125; 备注1234567891011121314151617181920212223242526/** * 输出从指定路径+文件名读取到的文件流的字符内容。 * @param inputStream 输入流 * @throws IOException*/public static String readAsString(InputStream inputStream)throws IOException&#123; BufferedReader reader = null; StringBuilder sb = new StringBuilder(); String line; try&#123; reader = new BufferedReader(new InputStreamReader(inputStream, \"utf-8\")); while((line = reader.readLine()) != null)&#123; sb.append(line); sb.append(\"\\r\\n\"); &#125; return sb.toString(); &#125;finally&#123; if(reader != null)&#123; try&#123; reader.close(); &#125;catch (IOException e) &#123; &#125; &#125; &#125; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/java/"}]},{"title":"kailLinux的使用","slug":"kailLinux的使用","date":"2018-10-22T13:07:50.000Z","updated":"2018-10-22T13:47:33.425Z","comments":true,"path":"2018/10/22/kailLinux的使用/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/22/kailLinux的使用/","excerpt":"","text":"桌面","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/ctf/"},{"name":"linux","slug":"linux","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/linux/"}]},{"title":"test","slug":"2018-10-21-test","date":"2018-10-21T13:59:00.000Z","updated":"2018-10-21T13:59:15.269Z","comments":true,"path":"2018/10/21/2018-10-21-test/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/21/2018-10-21-test/","excerpt":"","text":"test！！","categories":[],"tags":[]},{"title":"ssh key应用(git远程服务器)","slug":"ssh-keygen应用","date":"2018-10-21T10:07:27.000Z","updated":"2018-10-21T12:57:57.738Z","comments":true,"path":"2018/10/21/ssh-keygen应用/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/21/ssh-keygen应用/","excerpt":"","text":"概念什么是公钥、私钥能够解决什么问题本地生成公钥与密钥### 在本地生成密钥对通过git bash的编码 123ssh-keygen -t rsa -b 4096 -C \"xxxx@xx.com\" # 输入密码，生成密钥对：xxxa和xxxa.pubcp xxxa ~/.ssh/ # 将密钥放到指定~/.ssh文件夹下cat xxxa.pub # 打印出公钥文件，这一个可以先拷贝起来，用于服务端使用 将密钥放到指定的ssh路径下（git默认读取的ssh文件路径） 将私钥添加到缓存上1ssh-add ~/.ssh/xxxa # ssh-add的作用主要将密钥添加到 ssh-agent 的高速缓存中，这样在当前会话中就不需要再次输入密码了 建立github的ssh key登录github https://github.com/settings/keys 点击New SSH key，将xxxa.pub公钥文件的拷贝值黏贴进来，title随便填，只是方便看。 在本机测试连接github1ssh -T git@github.com # 因为我们把项目寄托在了github的服务器上了，所以是github.com 建立VPS服务的ssh key拷贝公钥编码1cat xxxa.pub # 打印出公钥文件，这一个可以先拷贝起来，用于服务端使用 在vps服务上存放公钥文件1vi ~/.ssh/git_authorzied_keys # 前提是配置好了ssh服务 在本机测试连接github1ssh -T git@xxxx.com # git是用户，因为我们把项目寄托在了VPS服务器上了，所以是ip地址或者域名 配置多个git服务 可能公司与私用的github不一样，但是我们希望同一个客户端，能够同时同步到两个服务器。 .ssh目录下配置config123456789101112Host github.com User git Hostname github.com #第一个的git地址 IdentityFile ~/.ssh/keyPaira #访问第一个git的SSH KEY Port 9102 #第一个的git端口Host xxxb.com User git Hostname xxxb.com #第二个的github的地址 IdentityFile ~/.ssh/keyPairb #访问第二个的github的SSH KEY Port 22# PS：在git中，因为字符编码的问题，注释含有中文会出错","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"}]},{"title":"Namesilp购买域名","slug":"Namesilp购买域名","date":"2018-10-21T01:34:39.000Z","updated":"2018-10-21T05:50:17.354Z","comments":true,"path":"2018/10/21/Namesilp购买域名/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/21/Namesilp购买域名/","excerpt":"","text":"前提流程namesilo官网 www.namesilo.com 注册过程 姓名、邮箱、国家、地址、手机号 验证邮箱 PS：注册信息尽量真实。没有必要担心你的真实信息被暴露，Namesilo 会提供免费的 Domain Privacy Protection 服务。 domain查找 在home页面上，就是domainSearch啦 选择域名 区别1. com 2. net 3. org 4. club 5. top 顶级、高端、高级、首席、顶端等 6. info 确认订单 设置域名续费规则、自动续费、设置隐私保护、注册时长（1年）、输入优惠码：okoff、go2think 支付 银行卡（推荐） PayPal（绑定银行卡也是比较麻烦的一点） 支付宝（需要用到的注册邮箱，由于本人支付宝找不到注册邮箱，就用银行卡了） bitcoin namesilo Skrill DWOLLA 域名解析设置DNS服务器 点击Manager My Domains 勾选你的域名（这样子才可以勾选ACTIONS for selectede Domains） 点击Changes NameServers（更改域名服务器） 判断是否DNS解析成功 https://www.ipip.net/ip.html 参考 https://www.jianshu.com/p/27b0ebdcec2c","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"}]},{"title":"VPS搭建hexo私人blog","slug":"blog+hexo+vps","date":"2018-10-20T16:01:55.000Z","updated":"2018-10-21T13:23:38.551Z","comments":true,"path":"2018/10/21/blog+hexo+vps/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/21/blog+hexo+vps/","excerpt":"","text":"前提条件参数VPS Location Los Angeles CPU Cores 1 x 2.1 GHz RAM 512 x MB Space 15 x GB Number of IPs 1 x IPv4 Number of IPv6 Address 1 x IPv6 Bandwidth 500 x GB 准备工作域名Githubhexo博客vps远程工具原理搭建流程安装Git1yum install -y git 安装nodeJs1yum install -y nodejs 安装Nginx1yum install -y nginx 检查安装情况123git --version # 1.8.3.1node -v # v10.12.0 or node --versionnginx -v # nginx/1.12.2 配置Nginx1234# 进入nginx路径，默认为这个路径，如果没有，可以 find / -name \"nginx\" 找一找cd /etc/nginxcp nginx.conf nginx.conf.bak # 习惯性备份vi nginx.conf # 编辑nginx.conf 修改nginx.conf的user节点 1user gui; 修改nginx.conf的server节点 1234567891011121314151617181920server &#123; listen 80 default_server; listen [::]:80 default_server; server_name www.wenchongjiaokou.info wenchongjiaokou.info; root /home/gui/blog/; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 启动Nginx12service nginx start # 启动nginx or systemctl start nginxservice nginx status # 查看nginx状态 or systemctl status nginx,active(running)就OK 安装Git用户123adduser gitchmod 740 /etc/sudoersvi /etc/sudoers 将git赋予执行sudoers权限的作用 12xxc ALL=(ALL) ALL# 作用：允许系统管理员让普通用户执行一些或者全部的root命令，但是没有root权限访问，依旧是用户的身份 将权限保存回原来的样子 1chmod 400 /etc/sudoers 给Git用户配置ssh12345cd /home/xxcmkdir ~/.sshvi ~/.ssh/git_authorzied_keys # 将本地机子的xxxx.pub公钥文件文本打开，拷贝编码值粘贴此处chmod 600 ~/.ssh/git_authorzied_keyschmod 700 ~/.ssh 本地git访问服务器1ssh -v git@服务器地址 # 服务器地址：ip地址、域名地址 建立git目录12cd /home/xxcgit init --bare xxxd.git # 初始化一个xxxd.init，可通过ls查看创建文件 注意点参考 VPS搭建个人博客：https://www.xksblog.top/use-VPS-to-build-personal-Hexo-blog.html","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"}]},{"title":"锻炼PC肌","slug":"PC肌的锻炼","date":"2018-10-20T11:41:20.000Z","updated":"2018-10-20T15:04:40.054Z","comments":true,"path":"2018/10/20/PC肌的锻炼/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/20/PC肌的锻炼/","excerpt":"","text":"什么是PC肌PC肌图 上男下女 切面图 PC肌概念​ PC肌，是英文pubococcygeus muscle的缩写，即耻尾肌，通俗的讲，对于男性而言就是靠近尿道和直肠的肌肉，对于女性而言，这个肌肉靠近尿道、阴道、直肠（如上图） PC肌锻炼定位PC肌#### 停止排尿 ​ 假装你正在小便，然后通过快速的肌肉收缩停止排尿。这个过程中，你用于停止膀胱排尿的肌肉就是PC肌。（注意：以下训练中，不可以通过憋尿的方式来练习！） 女生版​ 将两腿打开，用一根手指伸进洞洞，尝试用力收缩夹紧手指，感受发力点。 男生版​ 用力将丁丁动一下（向上顶、颤动一下），感受用力的肌肉。 ​ PC肌锻炼的目标 （女）改善下面松弛问题 （女）预防和治疗尿失禁 （女）防止子宫脱落 （女）增加洞洞弹性 （女）防止顺产时私处撕裂 （女）增加做爱时啪啪啪的摩擦感 （女）增强高潮时的收缩度 （男）锻炼你控制射精的肌肉，避免早泄。 （男）锻炼出具有“肌肉感”的阴茎（也就是充分让它变粗）。 （男）提高射精量和射精频率。 （男）预防前列腺癌 显著改善性能力。 锻炼出具有多次性高潮，而无疲惫感。 PC肌锻炼的基本方法 不停的进行停止排尿感觉的锻炼（不是指排尿的时候锻炼，而是定位PC肌，找到感觉） 直接躺床，两腿伸直 锻炼姿势，躺床版本 锻炼姿势，坐椅版本：坐在椅子上，背靠椅背，两腿双脚岔开八字，PC肌相当于面向正前方 PC肌锻炼的初级方法阶段一（第一周） 每天进行3组。 每组收缩PC肌20下。 每次收缩保持1到2秒。 放松肌肉。 每周进行3到4天。 正常呼吸，避免屏气。 阶段二（第二周） 每天进行3组。 每组收缩PC肌20下。 每组慢速收缩PC肌10下。 非慢速收缩：每次PC肌保持1到2秒。 慢速收缩：5秒时间慢慢对PC肌收缩 直至不能继续收缩为止。 每次收缩保持5秒以上。 尽可能的利用剩下的5秒时间逐渐放松肌肉。 PC肌锻炼的中级方法阶段一（第三周） 每天三组。 每组收缩PC肌50下。 每次收缩PC肌保持5到7秒。 开始感受如何单独或同时收缩你的阴茎和肛门括约肌 阶段二（第四周） 阶段一+锻炼结束后。 进行PC肌交替练习。 非常慢的收缩PC肌（数分钟）。 保持缓和的呼吸。 极限时，开始收缩PC肌20下。 需要收缩到完全收缩的位置点上，并保持30秒。 阶段三（第五周） 阶段一+锻炼结束后。 进行PC肌断续练习。 断断续续的收缩PC肌。 断断续续的放松肌肉。 要点：轻轻的断断续续，直到完全收紧；反过来一样。 阶段四—男生专用版 勃起状态 每组30次 方法一：小毛巾放在勃起的丁丁上（给丁丁施压，举重） 方法一：PC肌收缩举起小毛巾，坚持2到5秒 方法二：手放在丁丁上方1到2英寸（丁丁摸高） 方法二：PC肌收缩顶到手掌位置，坚持2到5秒 方法三：手放在丁丁上方1到2英寸，并往下压（丁丁举重+摸高） 方法三：PC肌收缩到手手掌位置，手掌下压，坚持2到5秒 放松 PC肌锻炼的高级方法阶段一（伴侣款） 勃起状态+湿湿状态 男性勃起、抽插，女性进入状态 男性与女性轮流收缩 阶段二（反复高潮锻炼） 勃起状态 逐渐按摩丁丁，直到高潮 接近高潮，停止按摩，开始收缩PC肌 勃起状态变疲软，重复第2点 再次接近高潮，重复第3点 阶段三（魔鬼级别） 只做1组 热身：50下PC肌收缩 尽可能收缩PC肌，30s 收缩2s，放松2s，100下PC肌收缩 尽可能收缩PC肌，1min 休息2min 50下PC肌收缩，5秒收缩练习。 PC肌锻炼的注意点 PC肌的锻炼，是肌肉的锻炼，所以切不可做过多的量！不然效果相反，只会损伤肌肉，达不到锻炼的作用。 一开始锻炼的时候，尽可能的在安静的地方练习，需要提高注意力，把注意力集中在，进行锻炼！切不可以分心进行PC肌收缩。 练习需要坚持不懈，为了你的xing福，每天都需要训练，逐渐加强。 （男性）这种锻炼会更多偏向于变得有肌肉（充血更充沛） 找不到感觉，需要加强自身的运动（跑步、深蹲等），同时花上1周时间进行PC定位，去感觉，但是切不可通过排尿进行锻炼！ 锻炼感觉，需要有胀热感 参考 PC肌练习：https://zh.wikihow.com/%E9%94%BB%E7%82%BCPC%E8%82%8C 知乎：https://www.zhihu.com/question/21012557 PC肌练习男女版：https://mp.weixin.qq.com/s/Ap7c1o808CE5Z2kLITmPpQ","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"}]},{"title":"Gradle与Maven的区别","slug":"Gradle&Maven","date":"2018-10-18T16:51:18.000Z","updated":"2018-10-18T16:51:51.630Z","comments":true,"path":"2018/10/19/Gradle&Maven/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/19/Gradle&Maven/","excerpt":"","text":"","categories":[],"tags":[{"name":"对比","slug":"对比","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/对比/"}]},{"title":"：常见error","slug":"error","date":"2018-10-18T16:01:30.000Z","updated":"2018-10-18T16:22:35.761Z","comments":true,"path":"2018/10/19/error/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/19/error/","excerpt":"","text":"Javajar包引用冲突slf4j 错误描述： 12idea SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.Defaulting to no-operation (NOP) logger implementation 错误原因：spring-boot自带了slf4j，引起错误的冲突包，是：maven通过依赖导包，而且在jdk-jre-lib-ext下包含了slf4j的包 解决方案：删除maven多余的依赖，删除jdk-jre-lib-ext下包含了slf4j的包","categories":[],"tags":[]},{"title":"idea下的spring-boot搭建","slug":"idea下spring-boot的搭建","date":"2018-10-18T11:51:01.000Z","updated":"2018-10-18T17:38:35.283Z","comments":true,"path":"2018/10/18/idea下spring-boot的搭建/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/18/idea下spring-boot的搭建/","excerpt":"","text":"Level 1：helloworld File-&gt;new-&gt;Module-&gt;Spring Initializr-&gt;Default-&gt;Next 填写Group、Artifact、选择Maven project-&gt;Next 选择Web-&gt;Web-&gt;Finish 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 在xxxApplication.java的同级目录下，建立一个controller文件夹，在controller下新建一个HelloController.java 编写控制层 123456789@RestController@EnableAutoConfigurationpublic class HelloController &#123; @RequestMapping(\"/hello\") private String index()&#123; return \"Hello World\"; &#125;&#125; 访问主页：http://localhost:8080/hello Level2：Mysql数据库 yml配置 12345spring: datasource: url: jdbc:mysql://192.168.88.107:3306/mytest?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true username: root password: 123456 数据库建表 1234567DROP TABLE IF EXISTS `persion`;CREATE TABLE `persion` ( `id` int(11) NOT NULL, `name` varchar(255) NULL DEFAULT NULL, `age` int(11) NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 bean类 123456789101112131415161718public class Persion &#123; private int id; private String name; private int age; private String description; @Override public String toString() &#123; return \"Person&#123;\" + \"id=\" + id + \", name='\" + name + '\\'' + \", age=\" + age + \", description='\" + description + '\\'' + '&#125;'; &#125;&#125; Level3：Mybatis 添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt; 编写mapper 1234567891011import net.aguicode.demo.bo.Persion;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Select;@Mapperpublic interface PersionMapper &#123; @Select(\"SELECT * FROM PERSION WHERE id = #&#123;id&#125;\") Persion getById(@Param(\"id\") int id);&#125;","categories":[],"tags":[{"name":"spring boot","slug":"spring-boot","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/spring-boot/"}]},{"title":"","slug":"换位思考","date":"2018-10-18T05:57:31.965Z","updated":"2018-10-20T15:06:04.212Z","comments":true,"path":"2018/10/18/换位思考/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/18/换位思考/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"浅谈Saas","slug":"浅谈Saas","date":"2018-10-17T08:54:20.000Z","updated":"2018-10-18T00:11:08.843Z","comments":true,"path":"2018/10/17/浅谈Saas/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/17/浅谈Saas/","excerpt":"","text":"Sass初体验什么是SaasSaas：Software as a server，软件即服务。 ​ 简单一句话，就是“云软件”。 ​ Saas厂商搭建好了设备、平台、软件，将应用程序以及数据库等部署到了云服务上，企业通过“租用”这种软件，而非传统的“买断”、下载即用的方式来获得软件服务。Saas服务提供了软件与服务器等的维护、技术支持。 Saas公司 国际：Salesforce、ORACLE、SAP、微软 国内：北森、纷享销客、销售易、EC、腾讯企点、易企秀、智趣百川、钉钉、企业微信、智齿、Udesk、有赞、微盟 对比Sass、Pass、Iaas​ 前提：有一个用户，需要一个xxx功能的应用。 ​ 方案一：用户什么也没有，需要采购一些设备、购买对应的开发工具、接着开发出这个应用软件供自己使用； ​ 方案二：用户不想购买设备了，直接购买了云服务，享受场外的服务器、存储和网络硬件，但是在云服务上，其他的什么也没有，还需要购买或搭建对应的开发工具、操作系统等，并维护这些平台，接着才能开发对应的应用软件，架在云服务上运行； ​ 方案三：用户直接购买了云服务，并且云服务还提供了中间件，即各种开发和分发应用的工具、OS, 编程语言, 开发库, 部署工具, 帮助软件开发者更快的开发软件服务等，用户可以直接在上面开发应用程序，就行了。 ​ 方案四：用户什么都不想做，直接购买了云服务，这个云服务，提供了设备、支持运行应用的平台、还有想要应用程序，都给你打包好了，你只要直接用就行了，连维护啥的都不需要。 Iaas Paas Saas 主要用户 系统管理员 开发人员 普通用户 主要技术 Virualization、VMware、Virtual Box、Xen Google GFS、BidTable、Hadoop、HDFS、TFS 分布式应用程序、SOAP、Https、Web2.0、Paas API 主要产品 Amazon EC2、IBM Blue Cloud、Digital Ocean Google App Engine、Windows Azure Platform Google Apps、Salesforce Sales Cloud、Facebook 虚拟化、服务器、存储、网络硬件 有 有 有 运行环境、中间件、操作系统 无 有 有 应用、数据 无 无 有 安全性 高 中 低 关注点 设备 软件环境 功能 ​ Saas的四个分级 级别 特点 一级（定制开发） 不可配置、无高性能、不可伸缩 二级（可配置） 可配置、无高性能、不可伸缩 三级（高性能的多租户架构） 可配置、高性能、不可伸缩 四级（可伸缩性的多租户架构） 可配置、高性能、可伸缩 定制开发：软件服务提供商为每个客户定制一套专属软件，不同软件版本有分属的独立代码，并被分别部署在不同的数据库实例和应用服务器实例上 可配置：为每个客户独立部署一个运行实例。只是，与一级成熟度模型中“每个实例专属一份代码”相比，二级成熟度模型中，每个实例共享同一份代码，而客户的个性化需求，仅通过不同的配置来实现。 高性能的多租用架构：隔离不同租户数据，确保不同租户共享同一个运行实例的基础上，为每个租户提供独立的应用体验和数据空间 可伸缩性的多租用架构：将已接入用户数据分配到不同Instance以分担用户访问的方式，解决多租户单实例应用架构下，集中式数据库随租户数量增多而性能受限的问题。一种高效的水平扩展策略，在租户数量大增时，无需更改应用架构，而仅需简单增加硬件设备数量 ，就可实现“支撑应用规模增长，方便实施应用修改”的效果。 Saas 架构Saas 关键点Saas——多用户租赁模式 分布式计算模型 分布式数据存储和访问模型 分布式部署运维模型 分布式数据库 Ocean数据库（阿里巴巴） MHA架构 预定义、行转列、XML扩展字段 工作流程docker——业务流程可配置 java自带工作流程 ### 技术方案 Protal 负载均衡（LVS） 单点登录（opensso、CAS、Josso） 消息中间件（JBoss、ActiveMQ） 分布式文件存储（Hadoop HDFS 、MogleFS） 数据缓存（EH，M） MOSQL（MangoDB） 目录服务（OpenDS、OpenLDAP） 想法云js 云dll 云接口 云数据库 第一站——CA 第二站——？？ 第三站——？？ 第四站——？？ ？？ ？？ 手头有什么资源，有利于自己的发展？？ 建立一个方案的服务与系统应用集成！！ 参考网站 什么是Saas：https://new.qq.com/omn/20180720/20180720A1BAAC.html Saas的窘境与未来：http://www.infoq.com/cn/articles/SaaS-SkyNAS-Synology 阮一峰：http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html Saas的4级成熟度模型：https://www.jianshu.com/p/a401f951d560 电商架构：https://www.afenxi.com/57103.html Saas的4级成熟度模型：https://www.jianshu.com/p/a401f951d560","categories":[],"tags":[{"name":"云服务","slug":"云服务","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/云服务/"}]},{"title":"Zabbix部署细节","slug":"Zabbix部署细节","date":"2018-10-16T15:06:27.000Z","updated":"2018-10-16T15:10:09.882Z","comments":true,"path":"2018/10/16/Zabbix部署细节/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/16/Zabbix部署细节/","excerpt":"","text":"完成时间部署时间：2018年10月21日 未完待续… 附录 zabbix安装和配置：http://blog.51cto.com/13736286/2150741 CentOS7下的部署：https://www.cnblogs.com/Sungeek/p/9069999.html","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"},{"name":"自动化","slug":"自动化","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/自动化/"}]},{"title":"R语言的基本使用","slug":"R_learn","date":"2018-10-16T11:43:39.000Z","updated":"2018-11-04T02:02:53.242Z","comments":true,"path":"2018/10/16/R_learn/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/16/R_learn/","excerpt":"","text":"读取数据操作路径1234567setwd('path') # 设置当前路径getwd() # 查看当前目录# 举例：# macsetwd('/Users/zoeZhang/R')# windowssetwd('C:/Users/zoeZhang/Destop/R') 加载与操作工具包12345678910library(survival) # 加载survival工具包biocLite('package') # 安装package工具包install.packages('package') # 安装package工具包remove.packages('package') # 删除package工具包update.packages() # 更新所有工具包source('https://bioconductor.org/biocLite.R') # 根据URL的方式来下载对应的工具包packages(all.available=T) # 查看所有packagesearch() # 查看已经加载的 packagedetach(package:package1) # 移除不需要的package1包 数据类型转换123456data&lt;-as.character(number); # 将数字类型的数据，number转为字符串的datadata&lt;-as.numeric(string); # 将数字符串的数据，string转为数字类型的datadata&lt;-as.array(original); # 将original转为数组类型的datadata&lt;-as.data.frame(array); # 将矩阵类型的数据，original转为数据框类型的datadata&lt;-as.matrix(original); # 将original转为矩阵类型的datais.character(data); # 判断data是什么类型 加载数据1234#创建一个example变量，读取example.txt到example上example&lt;-read.table('example.txt',fill=TRUE,head=TRUE) head(example) # 显示example变量的前行数据os&lt;-example[,'survival'] # 将example变量的surival相关数据输出到os变量 生存分析关键函数12Surv(time,event) # time:时间发生的跟踪时间、event：预期事件的发生状态survfit(formula) # formula：预测变量之间的关系 举例1234567891011121314fit&lt;-survfit(Surv(time,event)~group,type='kaplan-meier')# 获取数据的统计摘要和性质summary(fit) #其中formula是Surv(time,event)~group,type='kaplan-meier'# 开始画图，画点，fit：生存分析的数值向量 lty：线条类型plot(fit,lty=1:3) # list(a,b)，存放两个元素的列表， c(a,b),创建一个有2个元素的向量，lty：线条类型# 添加图例，即坐标轴这些legend(list(x=0.2,y=0.2), c(\"Group1\", \"Group2\"), lty = 1:3) # 用于不同组的统计检验survdiff(Surv(os,event)~group,rho=0) 核苷酸芯片数据的分析关键函数(affy)123456789# 读取当前目录raw_data文件的细胞文件，将值赋予给affy.data对象# 当前目录可以通过getwd()和setwd('xxxx/x/xx/')来获取与设置affy.data = ReadAffy(celfile.path=\"raw_data\") # 查看芯片基本的数据信息show(affy.data)# 查看芯片的样品名sampleNames(affy.data)# 读取affy.data数据中的A.CEL/B.CEL/C.CEL/D.CEL数据，并赋值到affy.data.E上affy.data.E=affy.data[,c(\"A.CEL\", \"B.CEL\", \"C.CEL\", \"D.CEL\")] 关键函数（affyPLM）123456library(gcrma)library(preprocessCore)# 导入affyPLM需要导入以上两个包library(affyPLM)# Pset &lt;- fitPLM(affy.data.E) 参考网站 生存分析函数小结：https://blog.csdn.net/shmilyringpull/article/details/17529637","categories":[],"tags":[{"name":"R语言","slug":"R语言","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/R语言/"}]},{"title":"删除github的历史记录","slug":"deleteGitHubHistory","date":"2018-10-15T18:07:14.000Z","updated":"2018-10-15T18:29:12.907Z","comments":true,"path":"2018/10/16/deleteGitHubHistory/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/16/deleteGitHubHistory/","excerpt":"","text":"准备 打开git 仓库地址，[URL], 例：https://github.com/githubUsername/repositories 一个存放临时git仓库的本地地址，例：C:/tmp 更新本地先将本地的代码提交（这里我已hexo项目为例） 12hexo cleanhexo d -g 克隆、进入仓库123456789cd C:/tmp #进入一个本地地址git clone https://github.com/githubUsername/repositories #克隆git仓库到本地某一个位置cd ./repositories #进入仓库,repositories即你实际的仓库名git checkout --orphan new_branch #创建一个new_branch的空分支git add -A #添加所有文件到这个new_branch空分支git commit -am 'commit' #commit，即提交的备注信息git branch -D master #先将主干分支删了git branch -m master #将当前所在分支（new_branch）重命名为mastergit push origin master --force #强行推送到github仓库，完成删除提交的历史记录","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"}]},{"title":"write to my brother","slug":"2018-10-15-write-to-my-brother","date":"2018-10-15T15:15:52.000Z","updated":"2018-10-15T15:18:48.157Z","comments":true,"path":"2018/10/15/2018-10-15-write-to-my-brother/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/15/2018-10-15-write-to-my-brother/","excerpt":"","text":"随笔 见识 考拉小巫","categories":[],"tags":[]},{"title":"给VPS加固安全设置","slug":"VPS设置安全加固","date":"2018-10-13T17:02:15.000Z","updated":"2018-10-21T12:41:30.537Z","comments":true,"path":"2018/10/14/VPS设置安全加固/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/14/VPS设置安全加固/","excerpt":"","text":"参数 系统：CentOS 7 运行内存：500M 内存：500G 默认端口 修改默认的端口 账户安全管理修改密码长度12vi /etc/login.defs#PASS_MIN_LEN 18 修改加密密码算法12vi /etc/login.defs#ENCRYPT_METHOD SHA512 denyhosts减缓暴力试错错误12345678yum install epel-release # 安装Epel存储库来安装denyhosts软件包yum install denyhosts vi /etc/denyhosts.conf# 参考修改如下：# DENY_THRESHOLD_INVALID = 5# DENY_THRESHOLD_VALID = 10# DENY_THRESHOLD_ROOT = 10# DENY_THRESHOLD_RESTRICTED = 1 创建普通用户账户12useradd pinksmallfanpasswd pinksmallfan 禁用不用的账号123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354who /var/log/wtmp #查看用户登录的状态vi /etc/passwd #查看账号vi /etc/group #查看系统的用户组# /etc/passwd # /sbin/nologin的用户就不要删啦！不然会重启会导致进不去登录页面，以下#的执行# userdel bin # userdel daemonuserdel admuserdel lpuserdel syncuserdel shutdownuserdel operatoruserdel ftp# userdel mail# userdel nobody# userdel systemd-bus-proxy# userdel system-network# userdel dbususerdel tssuserdel sshd# userdel postix# userdel chrony# /etc/groupgroupdel admgroupdel lpgroupdel newsgroupdel uucp# groupdel sys# groupdel tty# groupdel disk# groupdel mem# groupdel kmem# groupdel wheel# groupdel cdrom# # groupdel mail# groupdel man# groupdel dialout# groupdel floppygroupdel games# groupdel tape# groupdel video# groupdel lock# groupdel audio# groupdel users# groupdel utmp# groupdel utempter# groupdel input# groupdel systemd-journal# groupdel ssh_keysgroupdel dip# groupdel postdropgroupdel pppusers 禁用非授权用户获得权限1234chattr +i /etc/passwdchattr +i /etc/shadowchattr +i /etc/groupchattr +i /etc/gshadow ps: 如果想要创建用户or修改密码，就用chattr -i命令来恢复 禁用ctrl+alt+delete命令12vi /etc/inittab# ca::ctrlaltdel:/sbin/shutdown -t3 -r now # 注释 设置/etc/profile123echo \"TIMEOUT=3600\" &gt;&gt;/etc/profilesed -i \"s/HISTSIZE=1000/HISTSIZE=10/\" /etc/profilesource /etc/profile 设置/etc/rcd/init.d/文件的许可权限1chmod -R 700 /etc/rcd/init.d/* ssh 安全配置1234567yum install sshcp /etc/ssh/sshd_config /etc/ssh/sshd_config.bakvi /etc/ssh/sshd_config# Port 22 # 修改默认参考# PermitRootLogin no# PermitEmptyPasswords no# UseDns no 防止攻击防止ping12345# 临时改防止pingecho 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all# 永久改防止pingvi /etc/rc.d/rc.local # echo 1 /proc/sys/net/ipv4/icmp_echo_ignore_all #添加 防止IP欺骗攻击1234vi /etc/host.conf# order bind, hosts# multi off# nospoof on 防止Dos攻击1234567vi /etc/security/limits.conf# hard core 0 #禁止文件的调试# hard rss 5000 #限制内存的使用，设定值为5MB# hard nproc 20 #限制进程为20vi /etc/pam.d/login# session required /lib64/security/pam_limits.so #添加，如果是32位系统用lib（不然可能会出现重启登录不上的问题，显示module is unknown，可以采用救援模式来修改回来，后面章节会讲）！64位用lib64 系统配置+性能调优使用ntp服务更新服务器时间12345yum -y install ntpntpdate ntp.aliyun.comcrontab -e# * */12 * * * ntpdate tp.aliyun.com #将会根据vps所在地址更新时间源，比如上海17点，vps在美国，显示的是05点cp /usr/share/zoneinfo/Asia/Shanghai/etc/localtime # 设置上海时间 删除系统相关信息12echo \"helloworld!\" &gt;/etc/issueecho \"helloworld!\" &gt;/etc/redhat-release 系统备份与应急处理设置系统镜像123456# 备份镜像tar cvpzf back_up.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=back_up.tgz /# 将proc、lost+found、mnt、sys、back_up.tgz自身都排除掉，不列入备份的一部分#还原镜像tar xvpzf back_up.tgz -C / rescue mode进入原系统123456789101112131415# rescue mode（救援模式）# 进入系统后，查看原系统的挂载路径# 会出现一个大的，和一个小的boot，其中通常小的boot即救援模式的linux# 比如，我的vps下，进入救援模式，会有两个设备，/dev/vda和/dev/vdb，与对应boot的/dev/vda1和/dev/vdb1,另外也可以通过df -h查看当前的挂载情况fdisk -l# 创建两个路径用来挂载mkdir /mnt/linuxmkdir /mnt/linux/boot# 将设备vdb挂载在linux下，boot的vdb1挂载在linux/boot下mount /dev/vdb/ /mnt/linux/mount /dev/vdb1/ /mnt/linux/bootchroot /mnt/linux/boot# /mnt/linux/root/目录下就是对应原系统的/ls -l /mnt/linux/boot/ 参考资料 https://blog.csdn.net/shentianzhi2009/article/details/40340941 解决Module is notknow https://blog.csdn.net/lzx_bupt/article/details/6792335 镜像备份：https://www.jianshu.com/p/69ce20effe7d?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"}]},{"title":"mvn的使用","slug":"mvn的使用","date":"2018-10-12T07:07:08.000Z","updated":"2018-10-16T16:55:29.589Z","comments":true,"path":"2018/10/12/mvn的使用/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/12/mvn的使用/","excerpt":"","text":"mvn 打包本地打包jar测试，跳过test1mvn clean install package -Dmaven.test.skip=true # mvn打包跳过test例程。 测试+test12#在含有pom的目录上输入mvn pacakge，既可以打包，其中包括Test例程（JUnit会运行进行测试）mvn package 打包到nexusmvn命令打包​ 设置 ​ DgroupId Group ​ DartifactId Artifact ​ Dversion 版本信息 ​ Dpackaging 发布类型 ​ Dfile 本地文件路径 ​ Durl 发布url ​ DrepositoryId 仓库id （可以参考setting里边的server节点的id） ​ 运行下命令就OK ​ mvn deploy:deploy-file -DgroupId=net.netca.xxx -DartifactId=NetcaXXX -Dversion=1.0.3 -Dpackaging=jar -Dfile=C:/tmp/jar/NetcaXXX-1.0.3.jar -Durl=http://192.168.XX.XX:XX/nexus/content/repositories/thirdparty/ -DrepositoryId=nexus-thirdparty nexus界面打包1. Sonatype侧边栏：Views/Respositories-Responsitories 2. 页面栏：Respositories-3rd party 3. 功能栏：3rd party-Artifact Upload 4. 操作： ​ 1. Select GAV Definition Source：选择From POM ​ 2. Select POM to Upload(button)：选择本地项目需要打包成jar，依赖的pom文件 ​ 3. Select Artifact(s) for Upload(button)：选择本地项目打包好的jar包 ​ 4. Add Artifact：将jar包进行添加到上传列表 ​ 5. Upload Aritifact(s)：上传jar包 常见错误jar依赖冲突​ 当引用第三方服务的时候，第三方服务的A.jar引用放置在了jdk的jre-lib-ext下，但是项目为maven项目，maven项目同时也包含了有A.jar。 解决方案： 1. 换一个没有A.jar的jdk，通过maven来引用A.jar。 2. 如果jdk不能替换，那么可以尝试maven的exclusions，去除自带的引用。 举例如下： 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.apache.axis2&lt;/groupId&gt; &lt;artifactId&gt;axis2-kernel&lt;/artifactId&gt; &lt;version&gt;1.7.6&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; Unauthorized1. 描述：当你想上传jar包到仓库nexus-thirdparty时，却发现，通过mvn命令行的方式上传失败，出现&quot;Unauthorized&quot;（没有权限）的错误。 2. 原因：本地setting配置文件（一般是C:\\Users\\用户名\\\\.m2\\settings.xml），没有配置好对应server id为nexus-thirdparty的账号密码 3. 解决方案：在setting.xml文件添加server节点 12345&lt;server&gt; &lt;id&gt;nexus-thirdparty&lt;/id&gt; &lt;username&gt;username&lt;/username&gt; &lt;password&gt;password&lt;/password&gt;&lt;/server&gt; pom.xml详解","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/配置/"},{"name":"mvn","slug":"mvn","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/mvn/"}]},{"title":"idea使用技巧大放送","slug":"idea-use-tips","date":"2018-10-11T15:00:00.000Z","updated":"2018-10-11T15:03:12.921Z","comments":true,"path":"2018/10/11/idea-use-tips/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/11/idea-use-tips/","excerpt":"","text":"将普通的项目转为maven项目 解决步骤： 项目（右键）- Add Framework Support - 弹框勾选maven - OK 配置pom","categories":[],"tags":[{"name":"idea","slug":"idea","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/idea/"},{"name":"工具","slug":"工具","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/工具/"}]},{"title":"高并发测试","slug":"highConcurrencyTest","date":"2018-10-11T13:36:24.000Z","updated":"2018-10-18T14:47:09.821Z","comments":true,"path":"2018/10/11/highConcurrencyTest/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/11/highConcurrencyTest/","excerpt":"","text":"高并发代码123456789101112131415161718192021222324252627282930@Test public void testConcurrency() throws Exception&#123; final int threadSize = 100; final CountDownLatch countDownLatch = new CountDownLatch(1); // 创建一个刚好有100个线程槽的线程池 final ExecutorService executorService = Executors.newFixedThreadPool(threadSize); for(int i = 0;i&lt;threadSize; i++)&#123; final int number = i+1; Runnable runnable = new Runnable() &#123; public void run() &#123; try &#123; countDownLatch.await(); // TODO 需要进行并发测试的函数 &#125; catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125;; // 线程池的申请线程 executorService.submit(runnable); &#125; System.out.println(\"Start!!\"); // 开始执行并发测试 countDownLatch.countDown(); // 等待之前申请线程的时间 executorService.awaitTermination(1000,TimeUnit.MILLISECONDS); &#125; ### 任务 通过IDEA构建一个spring-boot的maven项目 连接mysql数据库，能够进行简单的增删改查，搭建为一个模板项目[Spring-boot_mysql] 进行高并发sql的查询测试 添加mybatis模块 nexus私服搭建 添加redis模块 添加zookeeper模块 添加dubbo模块 添加webSocket模块 添加netty模块-&gt;与tomcat切入（对比） 未完待续 idea 项目搭建、部署的流程步骤 技术原理的执行步骤 业务的流程步骤 ​","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/测试/"},{"name":"高并发","slug":"高并发","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/高并发/"},{"name":"代码","slug":"代码","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/代码/"}]},{"title":"故事化应用","slug":"tellAYarn","date":"2018-10-10T15:39:29.000Z","updated":"2018-10-10T16:41:02.728Z","comments":true,"path":"2018/10/10/tellAYarn/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/10/tellAYarn/","excerpt":"","text":"简介 创建一个笔记，收集灵感，收集有用的学习知识点 共同点：这些博客内容都有一个点，故事化 通过故事来讲明白一个技术点，需要对技术深刻的了解、具有很强的表达能力 需要多读多看，多反复多琢磨，寻找与形成属于自己语言的表达方式 重点：扩展自己表达方面的思维能力，做一个会讲故事的专业人员 格言：日积月累就是超越，一点一滴就是实力的见证。 RESTful故事化： https://blog.csdn.net/hzy38324/article/details/78360525 阮一峰：http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html 持续更新中…","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"},{"name":"知识框架","slug":"知识框架","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/知识框架/"}]},{"title":"Spring boot","slug":"Spring-boot","date":"2018-10-10T13:54:55.000Z","updated":"2018-10-18T16:53:19.249Z","comments":true,"path":"2018/10/10/Spring-boot/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/10/Spring-boot/","excerpt":"","text":"简介 创建一个笔记，收集灵感，收集有用的学习知识点 方便以后开始学习一样技术的时候，能够快速定位 写下学习计划，制定学习方向、模板，做好二次学习的准备 需要记录技术点的详细的官网地址，知识点参考的网址 定位：这里的文章大多不是原创，以收集资料为主 重点：扩展自己的知识面 要求：标题、简单的概括、简单的示例（可选）、应用场景（可选） 格言：日积月累就是超越，一点一滴就是实力的见证。 Spring boot亮点 简单 变简单 自动配置 简化依赖 概述 采用了Spring boot，能够解决什么问题呢？ Spring boot能够使编码变精简、配置变简单、部署变快捷、监控变容易 Spring boot默认快速启动一个web容器，不需要外置web容器，将注意力集中在编码上，而不是配置容器等方面上。 Spring boot是Spring框架扬长避短的杰作，简化了spring冗余的配置，从xml配置到java Config配置，从setBean的方式配置到自动注解，从多个properties+xml到只要一个yml就完成了配置。 Spring boot 默认配置；额很多框架的使用方式，整合了所有框架 Spring boot能够对主流开发的框架，进行无配置集成，提高了开发、部署的效率，不用再花额外的时间，研究不同框架的整合与集成上 Spring boot支持的配置文件application.yml，减少了传统的properties的链式麻烦 Spring boot提供了热部署，实时刷新后台服务，能将服务改动后的效果，呈现出来 Spring boot一键启动，只需要一个jar、war，甚至一段代码就可以了，不需要预部署应用服务器 configprops：属性配置、dump：线程工作状态、env/name：环境变量、metrics/name：JVM性能指标、mapping：RESTful path与服务类的映射关系 Spring boot有什么不足？ 缺少服务注册、发现等外围方案、配套功能 缺少外围监控集成方案，自身的acturator所提供的监控功能，还没有集成与现有的监控对接 缺少外围安全管理方案、缺少REST落地的URI规划方案 内置tomcat和Jetty容器 比较适合做微服务，而不太适合做比较大型的项目。 Spring boot 相关技术（以下关键词都可以另外写一章进行记录） Mock 测试，用来模拟不容易构造、比较复杂的对象，方便并行的开发工作，可以用来极速演示、隔离系统（避免数据库污染）、模拟驱动开发、无法访问的资源、提高测试的覆盖率 Docker 装满需要应用程序的容器，让更多的应用只需要在同一个硬件运行，即连即用，让开发人员易于快速构建可随时运行的容器化应用程序，大大简化了管理和部署应用程序的任务。 RESTful API 设计规范，用于 Web 数据接口的设计。让客户端发出的数据操作指令都是”动词 + 宾语”的结构 MicroService 部署流程关键点附录 Spring Boot 浅谈：https://blog.csdn.net/fly_zhyu/article/details/76407830 自动配置：https://www.jianshu.com/p/3d788198efab 极简的Spring boot：https://www.jianshu.com/p/1936a23d6a56 未完待续…","categories":[],"tags":[{"name":"Spring-boot","slug":"Spring-boot","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/Spring-boot/"},{"name":"知识框架","slug":"知识框架","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/知识框架/"}]},{"title":"日积月累就是超越，一点一滴就是实力的见证","slug":"inspiration","date":"2018-10-09T15:08:42.000Z","updated":"2018-10-16T15:55:05.877Z","comments":true,"path":"2018/10/09/inspiration/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/09/inspiration/","excerpt":"","text":"简介 创建一个笔记，收集灵感，收集有用的学习知识点 方便以后开始学习一样技术的时候，能够快速定位 写下学习计划，制定学习方向、模板，做好二次学习的准备 需要记录技术点的详细的官网地址，知识点参考的网址 定位：这里的文章大多不是原创，以收集资料为主 重点：扩展自己的知识面 要求：标题、简单的概括、简单的示例（可选）、应用场景（可选） 格言：日积月累就是超越，一点一滴就是实力的见证。 pythonunitest是什么​ 单元测试框架 简单的测试用例12345678910111213141516171819202122232425262728293031import unittestclass MyTest(unittest.TestCase): # 继承unittest.TestCase # 每个测试用例执行之后做操作 def tearDown(self): print('111') # 每个测试用例执行之前做操作 def setUp(self): print('22222') # 必须使用 @ classmethod装饰器, 所有test运行完后运行一次 @classmethod def tearDownClass(self): print('4444444') # 必须使用@classmethod 装饰器,所有test运行前运行一次 @classmethod def setUpClass(self): print('33333') # 测试用例 def test_a_run(self): self.assertEqual(1, 1) # 测试用例 def test_b_run(self): self.assertEqual(2, 2) #运行所有的测试用例 if __name__ == '__main__': unittest.main() 常用断言12345678assertEqual(a, b) # a == b assertNotEqual(a, b) # a != b assertTrue(x) # bool(x) is True assertFalse(x) # bool(x) is False assertIsNone(x) # x is None assertIsNotNone(x) # x is not None assertIn(a, b) # a in b assertNotIn(a, b) # a not in b HTMLTestRunner介绍：测试报告，引用模板 12345678910111213if __name__ == '__main__': #创建一个测试集合 test_suite = unittest.TestSuite() #测试套件中添加测试用例 test_suite.addTest(MyTest('test_run1')) #使用makeSuite方法添加所有的测试方法 #test_suite.addTest(unittest.makeSuite(MyTest)) #打开一个保存结果的html文件 fp = open('res.html','wb') #生成执行用例的对象 runner = HTMLTestRunner.HTMLTestRunner(stream=fp,title='api测试报告',description='测试情况') #执行测试套件 runner.run(test_suite) xmlrunner介绍：jenkins识别的测试报告，引用模板 123456if __name__=='__main__': test_suite = unittest.TestSuite() test_suite.addTest(unittest.makeSuite(My)) #指定报告放的目录 runner = xmlrunner.XMLTestRunner(output='report') runner.run(test_suite) testsuite介绍：组织测试模块 12345678if __name__=='__main__': #创建模块管理 test_suite=unittest.TestSuite() test_suite.addTest(Test1('Test1')) test_suite.addTest(Test2('Test2')) #使用run()方法运行测试套件 runner=unittest.TextTestRunner() runner.run(test_suite) 官网https://docs.python.org/2/library/unittest.html xrld、xlwt是什么​ python的excel操作 12345678910111213141516171819202122import xlrd#打开excel表excel=xlrd.open_workbook(u\"excel.xlsx\")#获取sheet表格（索引、顺序、表名）sheet=excel.sheets()[0]sheet=excel.sheet_by_index(0)sheet=excel.sheet_by_name(u\"Sheet1\")#获取行数rowsCount=sheet.nrows#获取列数columnsCount=sheet.ncols#获取行内容rowsContent=sheet.row_values(0)#获取列内容rowsContent=sheet.col_values(0)#返回单元格对象table.cell(rowx,colx)#返回单元格中的数据类型table.cell_type(rowx,colx)#返回单元格中的数据table.cell_value(rowx,colx) 官网https://xlrd.readthedocs.io/en/latest/api.html ConfigParser介绍​ 读取写入配置文件 12345[my_config]host=192.168.88.107user=root[com_config]host=10.119.10.13 config.ini配置文件如上 基本使用12345678910111213141516import ConfigParserimport osconfig=ConfigParser()config.read('/usr/local/config.ini')# 打印所有节点标题print config.sections() # ['my_config','com_config']# 删除指定节点config.remove_sections('my_config') # True# 打印所有键值对print config.items('my_config') # [('host','192.168.88.107'),('user','root')]# 添加新的节点config.add_section('new_config')# 写入指定的节点，添加键值对config.set('new_config','host','192.168.88.102')# 写入实际的配置文件config.write(open('/usr/local/config.ini','w')) 官网https://docs.python.org/2/library/configparser.html Jenkins是什么 能够驱动其他软件一起工作，可以持续、自动地构建的一个集成工具 能够执行定时的任务，并进行监控，跟踪版本的发布，生成对应的日志 能够进行持续集成、交付、部署，能够配置RSS或者邮件等进行通知发送 能够构建测试软件，生成对应的测试报告 使用流程 版本控制、集成工具、运行环境的安装 ​ 插件：git、maven、svn、jdk、tomcat yum安装jenkins，安装目录、配置文件、日志目录， ​ 形式有三种：yum、war包、docker安装 jenkins部署（部署在tomcat上等web容器） 在web主页，配置maven、GIT、jdk、svn 邮件配置、ssh配置、插件安装 项目构建 官网​ https://jenkins.io/ smtplib是什么​ SMTP协议，即发送邮件的协议；python支持通过smtplib模块进行邮件发送。 ​ 它工作的方式是：通过与src地址到dir地址传送邮件的规则，通过smtplib来控制邮件的中转方式。 ​ 并且支持：纯文本、带附件、html格式的邮件发送 ​ 官网​ https://docs.python.org/2/library/smtplib.html Selenium是什么​ Selenium是一系列基于Web的自动化工具，提供一套测试函数，用于支持Web自动化测试。 参考网址 自动化测试：https://blog.csdn.net/huilan_same/article/details/52559711 unitest： https://www.cnblogs.com/feng0815/p/8045850.html unitest： https://www.jianshu.com/p/a5550835f361 xrld： https://www.cnblogs.com/insane-Mr-Li/p/9092619.html ConfigParser： https://www.cnblogs.com/snifferhu/p/4368904.html ConfigParser：https://blog.csdn.net/miner_k/article/details/77857292 Jenkins：https://www.jianshu.com/p/6aa1c9b9ae01 jenkins详细部署：https://blog.csdn.net/qq_26848099/article/details/78901240 smtplib：https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832745198026a685614e7462fb57dbf733cc9f3ad000 smtplib：http://www.runoob.com/python/python-email.html Selenium：https://blog.csdn.net/wanglian2017/article/details/72843984 PlusUltra","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/python/"},{"name":"知识框架","slug":"知识框架","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/知识框架/"}]},{"title":"外币银行卡的区别","slug":"BankCard","date":"2018-10-08T17:10:00.000Z","updated":"2018-10-09T15:35:35.782Z","comments":true,"path":"2018/10/09/BankCard/","link":"","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/2018/10/09/BankCard/","excerpt":"","text":"信用卡，国际有六大信用卡公司： 美国：VISA（威士国际）、MasterCard（万事达卡国际）、AE blue（美国运通国际）、Diners Club（大来） 中国：UnionPay（银联） 日本：JCB 区别： Visa：第一大卡，在亚洲和澳大利亚的受理商户比较多 MasterCard：第二大卡，在欧洲和北美较多","categories":[],"tags":[{"name":"other","slug":"other","permalink":"https://pinksmallfan.github.io/WenChongAndJiaoKou/tags/other/"}]}]}